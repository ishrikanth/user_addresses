require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UsersController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {"user":{
      "first_name":"John Doe",
      "middle_name": "Michael",
      "last_name": "Doe",
      "age":45
      },
      "addresses":[
         {
            "shipping":{
               "line1":"Apt #14, Suite #22",
               "line2":"ABC Street, BCDTown",
               "city":"XYCity",
               "state":"Foo",
               "country":"Bar",
               "zip":"0102"
            }
         }
      ]
   }
  end

  let(:invalid_attributes) do
    {"user":{
      "first_name":"John Doe",
      "middle_name": "Michael",
      "last_name": "Doe",
      "age":45
      },
      "addresses":[
         {
            "shipping":{
               "line1":"Apt #14, Suite #22",
               "line2":"ABC Street, BCDTown",
               "city":"XYCity",
               "state":"Foo",
               "country":"Bar",
            }
         }
      ]
   }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response' do
      user = FactoryBot.create(:user)
      get :index, format: :json
      expect(response).to be_success
      expect(assigns(:users)).to include(user)
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      user = FactoryBot.create(:user)
      get :show, params: { id: user.to_param }, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      user = FactoryBot.create(:user)
      get :edit, params: { id: user.to_param }, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new User' do
        expect do
          post :create, format: :json, params:  valid_attributes
        end.to change(User, :count).by(1)
      end

      # it 'redirects to the created user' do
      #   post :create, format: :json, params: valid_attributes , session: valid_session
      #   expect(response).to redirect_to(User.last)
      # end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params:  invalid_attributes, session: valid_session
        expect(response).to_not be_success
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        {"user":{
          "first_name":"John Doe",
          "middle_name": "Michael",
          "last_name": "Doe",
          "age":4
        },
          "addresses":[
             {
                "shipping":{
                   "line1":"Apt #15, Suite #22",
                   "line2":"ABC Street, BCDTown",
                   "city":"XYCity",
                   "state":"Foo",
                   "country":"Bar",
                   "zip":"0103"
                }
             }
          ]
       }
      end

      it 'updates the requested user' do
        user = User.create! valid_attributes
        params =
        put :update,format: :json,params: new_attributes , session: valid_session
        user.reload
        expect(user.addresses.last[:zip]).to_eq "0103"
      end

      # it 'redirects to the user' do
      #   user = User.create! valid_attributes
      #   put "update/#{user.id}",format: :json, params: valid_attributes , session: valid_session
      #   expect(response).to redirect_to(user)
      # end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        user = FactoryBot.create(:user)
        put :update, id: user.id,format: :json,params: invalid_attributes , session: valid_session
        expect(response).to_not be_success
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested user' do
      user = FactoryBot.create(:user)
      expect do
        delete :destroy,format: :json, params: { id: user.to_param }, session: valid_session
      end.to change(User, :count).by(-1)
    end

    # it 'redirects to the users list' do
    #   user = FactoryBot.create(:user)
    #   delete :destroy,format: :json, params: { id: user.to_param }, session: valid_session
    #   expect(response).to redirect_to(users_url)
    # end
  end
end
